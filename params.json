{"name":"Course Advice System","tagline":"","body":"## Welcome to my [OOTI](http://wwwooti.win.tue.nl/) Mini-project: Course Advices System.\r\n\r\n### System Overview\r\nThe main idea of this mini project is to provide a platform for students who have completed courses to give advice to students who are currently enrolled or about to enroll in the same course. The main use case is driven by a student as a main actor, who can give an advice for already completed courses. The advice can be a tip, additional learning sources, multimedia, feedback, etc. Other student can evaluate the advice for particular course (helpful or not) and can contribute in the process of creating helpful advices. By using the feedback other student will know how helpful a given advice is. The student can set following courses, completed courses, favorite courses and favorite advices. The system has to have central data repository that can be accessed by different clients.\r\n\r\n###Functional Requirements\r\n\r\n![Use Case Diagram](https://github.com/janeski/courseadvicesystem/blob/gh-pages/images/diagrams/UseCase.png?raw=true)\r\n\r\n###Use Case Realization\r\nStarting point for the use case realizations were the user goal level use cases described above. The user goal level use cases describe different functional requirements, but they are realized using same approach. Therefore the use case CAS1: Evaluate Course Advice was chosen as a referent use case for the use case realization process. The main guiding principle for setting up the class diagram was the aggregation relationships among the various components of the Course Advice System such as: University, StudyProgram, Faculty, Course, Advice, and various user types. After these were identified, other associations were introduced in order to accomplish the business logic from the use cases. These mainly came from the required interactions among the Course Advice System objects as described in the interaction diagram.\r\n\r\n![Class Diagram](https://github.com/janeski/courseadvicesystem/blob/gh-pages/images/diagrams/ClassDiagram.png?raw=true)\r\n\r\nThe following modeling decisions were taken during the elaboration iterations:\r\n1. The Course Advice System class has the role of master class.\r\n2. The relationships among the University, Faculty, StudyProgram and the Course class are detailed enough to present a functional and general model of a university. The idea behind this is that the proposed solution shall be used for different universities with different organization.\r\n\r\n![Sequence Diagram](https://github.com/janeski/courseadvicesystem/blob/gh-pages/images/diagrams/Sequence.png?raw=true)\r\n\r\n###Nonfunctional Requirements\r\nFew non-functional requirements were derived from the original project idea. They are described in the following section.\r\n####Scalability\r\nScalability is the ability of a system to function well (without degradation of other quality attributes) when the system is changed in size or in volume in order to meet users’ needs. One of the major issues in scalability is the capacity of the system to accommodate an increasing number of users without a degradation of the systems performance as already described. This non-functional requirement is directly connected with the provided solution. The Course Advice System is meant to be used on every university regardless the number of the enrolled students or the number of lecturers or courses.\r\n####Extensibility\r\nExtensibility is the ease with which the system capabilities can be extended without affecting other services or parts of the system. Extensibility for architecture today is important because the business environment in which a software system lives is continually changing and evolving. These changes in the environment will mean changes in the software system, service users, and services providers and the messages exchanged among them. The ability to extend and to cover different study groups, educational institutions, and different courses is the main reason why this quality attribute is important for the Course Advice System.\r\n####Adaptability\r\nAdaptability means the ease with which a system may be changed to fit changed requirements. Adaptability for the Course Advice System means that it can adapt quickly to new opportunities and potential competitive threats. Knowing the fact that the education system is changing end evolving, the Course Advice System should follow this in order to response to the customer needs.\r\n###Choice of architectural style\r\nThe main idea behind the Course Advice System is that every student can log in to the system and check whether a certain course has advices and how helpful they are. That means that the Course Advice System should be accessible via different platforms, on different ways. The first targets are the mobile platforms, because every student has a smart mobile device that is connected to the Internet and can access the Course Advice System. Therefore, the Course Advice System should have an architecture that enables central data repository that can be online accessed from different access points such as smart phones and university portals.\r\nIn order to meet this requirements and also non-functional requirements described in the previous view there are two architectural styles that should be considered:\r\n* Service – oriented architecture style (SOA)\r\n* Resource – oriented architecture style (ROA)\r\nThe first one is more business oriented where different business processes are already covered by different solutions and the SOA has to provide unique and common communication interface for them and also for future business processes. That makes SOA not so applicable in the Course Advice System because:\r\n* Course Advice System is completely new solution (there is no need of compatibility with current business process solutions)\r\n* There is only one group of services there are offered to different client platforms\r\n* There is no business to business communication\r\n\r\nOn the other side, ROA enables accessing resources instead of services. ROA enables developing software in the form of resources with \"RESTful\" interfaces. With ROA, the Course Advice System can be designed as a set of resources (discrete pieces of code responsible for different business logic) that can be accessed via different platforms such as smart phones and web portals.  Other thing that makes ROA more suitable that SOA is that the ROA is extension of the \"RESTful\" web services and uses the \"RESTful\" protocol. Representational state transfer (REST) is a style of software architecture for distributed systems such as the World Wide Web, which has emerged as a predominant web API design model. There are two reasons that make ROA as an architectural style to fit in the Course Advice System. First, it completely meets the non-functional requirements: scalability, extensibility, and adaptability. With ROA, the Course Advice System can be used for different universities (with different size in term of students and courses), additional and future functionalities can be added and also different changes in the educational system can be met. ROA enables the business processes to be encapsulated in form of discrete pieces of code that can be modified and extended.Second, ROA uses REST, which is predominant web API design model, and that will make Course Advices System accessible for any client platform that can communicate with REST interfaces.\r\n\r\n###Choice of architectural patterns \r\nROA as an architectural style defines that business logic of the Course Advice System is exposed to the end users by services. Those services should implement the use case realization (Figure 4) from the previous view.  The services should implement the business logic over different objects and should implement their storing in certain data store. There are two constraints that influenced the choice of the architectural patterns. The first constrain comes from the object-relational mapping technique. In the Course Advice System a relational database is used as a central repository. Therefore, an object-relational mapping should be performed between the objects in the Course Advice System and the relational database. Hibernate Framework was used as an object-relational mapping technique. Hibernate is an object-relational mapping (ORM) library for the Java language, providing a framework for mapping an object-oriented domain model to a traditional relational database. Hibernate solves object-relational impedance mismatch problems by replacing direct persistence-related database accesses with high-level object handling functions. The second constraint, which is more important, is actually the need to make the Course Advice System database independent solution. The Course Advice System should work on every relational database and should be decoupled from the data access implementation. \r\nThese two constraints forced separation of the classes in two different groups: one group responsible for the business logic (directly accessible by the services) and one group responsible for data access. This grouping indicated using a modification of the “Layers” (in the literature also known as Data Access Object) architectural pattern in order to provide:\r\n* Portability – different relational databases\r\n* Reusability – reusability of different groups (layers)\r\n* Adaptability – making the system flexible for future changes\r\n\r\n###Architecturally Significant Design Packages\r\nApplying the layer architectural patterns created three architecturally significant design packages. \r\nThe top package (Course Advice System, ooti.caa.model package in the source code) represents the business layer that is consisted of the business classes derived from the use case realization.These classes in Java development world are also known as POJO (Plain Old Java Object) and as Transfer Objects in the Data Access Object architectural pattern. The middle layer (Data Access Object, ooti.caa.dao package in the source code) is consisted of data access object interfaces that can be used for any object-relational mapping framework.\r\n\r\n![Significant Design Packages](https://github.com/janeski/courseadvicesystem/blob/gh-pages/images/diagrams/DesignPackages.png?raw=true)\r\n\r\nThe bottom layer (HibernateDAO, ooti.caa.hibdao package in the source code) is actually implementation of the data access layer using the Hibernate Framework. In order to implement the layer architectural pattern few design patterns were added to the model. To enable top layer classes to construct the appropriate number of device objects the abstract factory interface is introduced. Observer and Adapter are also part of the layer architectural pattern but in the Course Advice System model are not necessary because Hibernate framework takes care of the data persistence throw the layers. \r\n![Class Diagram (Patterns Applied)](https://github.com/janeski/courseadvicesystem/blob/gh-pages/images/diagrams/PatternsApplied.png?raw=true)\r\n\r\n### Contact\r\nIf you have any questions or comments please do not hesitate to ask me: m.janeski[at]tue.nl","google":"UA-43917401-1","note":"Don't delete this file! It's used internally to help with page regeneration."}